{"version":3,"sources":["components/Weather.js","components/Forecast.js","components/Navbar.js","components/Footer.js","components/Loading.js","components/Datetime.js","components/DataNotfound.js","App.js","index.js"],"names":["Weather","props","className","weatherData","name","sys","country","onClick","reloadButton","Math","trunc","main","temp","src","process","weather","icon","alt","description","temp_min","temp_max","feels_like","pressure","wind","speed","humidity","Date","sunrise","toLocaleTimeString","sunset","Forecast","arr","foreCast","list","days","map","val","index","dt","getDay","Navbar","type","placeholder","value","inputVaue","onChange","searchfunc","buttonFunc","Footer","href","Loading","Datetime","currentDate","DataNotfound","App","useState","lat","setLat","long","setLong","data","setData","forecastData","setforecastData","date","setDate","city","setCity","fetchcurrentlocationData","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","then","res","json","result1","result2","console","log","useEffect","weekday","Array","month","todaydate","getDate","today","getMonth","DataTime","e","target","inputValue","result3","result4","alert","fetchCityData","message","window","location","reload","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4f198f3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props)=>{\r\n    \r\n    return(\r\n        <>\r\n            <div className=\"main\">\r\n                <div className=\"main-header\">\r\n                    <i className=\"fas fa-map-marker-alt\"></i>\r\n                    <p className=\"location\">{props.weatherData.name},{ props.weatherData.sys.country}</p>\r\n                    <i className=\"fas fa-sync-alt\" onClick={props.reloadButton}></i>\r\n                </div>\r\n                <div className=\"main-weather\">\r\n                    <p>{Math.trunc(props.weatherData.main.temp)}&deg;C</p>\r\n                    <img className=\"weather-img\" src={process.env.REACT_APP_ICON_URL+`/${props.weatherData.weather[0].icon}.png`} alt=\"Notfound\"/>\r\n                    <p>{props.weatherData.weather[0].description}</p>\r\n                </div>\r\n                <div className=\"flex\">\r\n                    <p className=\"details\">Min Temp : {Math.trunc(props.weatherData.main.temp_min)}&deg;C</p>\r\n                    <p className=\"details\">Max Temp : {Math.trunc(props.weatherData.main.temp_max)}&deg;C</p>\r\n                 </div>\r\n                 <div className=\"flex\">\r\n                    <p className=\"details\">Real fell : {Math.trunc(props.weatherData.main.feels_like)}&deg;C</p>\r\n                    <p className=\"details\">Pressure : {props.weatherData.main.pressure}mbar</p>\r\n                </div>\r\n                 <div className=\"flex\">\r\n                    <p className=\"details\">Wind Speed : {props.weatherData.wind.speed} Km/h</p>\r\n                    <p className=\"details\">Humidity: {props.weatherData.main.humidity} %</p>\r\n                </div>\r\n\r\n                <div className=\"flex\">\r\n                    <p className=\"sunrise-sunset\">Sunrise: {new Date(props.weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\r\n                    <p className=\"sunrise-sunset\">Sunset: {new Date(props.weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\r\n                 </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\n\r\nconst Forecast = (props)=>{\r\n    const arr = props.foreCast.list;\r\n    const days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\r\n    return(\r\n        <>\r\n            <div className=\"forecast\">\r\n\r\n                { arr.map((val,index)=>{\r\n                    return(\r\n                        <>\r\n                            <div className=\"card\" key={index}>\r\n                                <div className=\"forecast-weather\">\r\n                                    <p>{Math.trunc(val.main.temp)}&deg;C</p>\r\n                                    <img className=\"forecastweather-img\" src={process.env.REACT_APP_ICON_URL+`/${val.weather[0].icon}.png`} alt=\"Notfound\"/>\r\n                                    <p>{val.weather[0].description}</p>\r\n                                </div>\r\n                                <div className=\"day-time\">\r\n                                    <p>{ days[new Date(val.dt * 1000).getDay()] }</p>\r\n                                    <p>{new Date(val.dt * 1000).toLocaleTimeString('en-IN')}</p>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    );\r\n                }) }\r\n\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Forecast;","import React from 'react';\r\n\r\nconst Navbar = (props)=>{\r\n\r\n    return(\r\n        <>\r\n            <div className=\"navbar\">\r\n                <div className=\"nav-item\">\r\n                    <h1 className=\"logo\">Weather App</h1>\r\n                    <div className=\"from-item\">\r\n                        <input type=\"text\" placeholder=\"Enter City Name\" className=\"input-field\" value={props.inputVaue} onChange={props.searchfunc}/>\r\n                        <button className=\"search-button\" onClick={props.buttonFunc}>Search</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Footer = ()=>{\r\n\r\n    return(\r\n        <>\r\n            <footer className=\"footer\">\r\n                <div className=\"footer-content\">\r\n                    <h6 className=\"text\">&#169; Copyright 2021, Designed by Molla Mainuddin</h6>\r\n                    <a href=\"https://github.com/Molla-Mainuddin\"><i className=\"fab fa-github\"></i></a>\r\n                    <a href=\"https://linkedin.com/in/molla-mainuddin\"><i className=\"fab fa-linkedin\"></i></a>\r\n                </div>\r\n            </footer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nconst Loading = ()=>{\r\n\r\n    return(\r\n        <>\r\n            <div className=\"loader\">\r\n                <p>Loading...</p>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Loading;","import React from 'react';\r\n\r\nconst Datetime = (props)=>{\r\n\r\n    return(\r\n        <>\r\n            <div className=\"date-time\">\r\n                <h2 className=\"date\">{props.currentDate}</h2>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Datetime;","import React from 'react';\r\n\r\nconst DataNotfound = ()=>{\r\n\r\n    return(\r\n        <>\r\n            <div className=\"not-found\">\r\n                <i className=\"far fa-frown\"></i>\r\n                <p>Sorry, City Not Found</p>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DataNotfound;\r\n","import React, { useEffect, useState } from 'react';\nimport Weather from './components/Weather';\nimport Forecast from './components/Forecast';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\nimport Loading from './components/Loading';\nimport Datetime from './components/Datetime';\nimport DataNotfound from './components/DataNotfound';\nimport Connection from './components/Connection';\n\nconst App = ()=> {\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n  const [forecastData,setforecastData] = useState([]);\n  const [date,setDate] = useState(\"\");\n  const [city,setCity] = useState([]);\n\n  const refresh = ()=>{\n     window.location.reload();\n  };\n\n  const searchData = (e)=>{\n      setCity(e.target.value);\n  };\n\n  const buttonClicked = ()=>{\n    const fetchCityData = async ()=>{\n      if(city!=\"\"){\n          await fetch(`${process.env.REACT_APP_API_URL}/weather?q=${city}&units=metric&appid=${process.env.REACT_APP_API_KEY}`)\n          .then((res)=> res.json())\n          .then((result3)=>{\n            setData(result3);\n          }); \n\n          await fetch(`${process.env.REACT_APP_API_URL}/forecast?q=${city}&units=metric&appid=${process.env.REACT_APP_API_KEY}`)\n          .then((res)=> res.json())\n          .then((result4)=>{\n              setforecastData(result4);\n          });  \n      }else{\n          alert(\"Enter Valid City Name\");\n      }\n    };\n    fetchCityData();\n  };\n\n \n  const DataTime = ()=>{\n      let date = new Date();\n      let weekday = new Array(7);\n      weekday[0] = \"Sunday\";\n      weekday[1] = \"Monday\";\n      weekday[2] = \"Tuesday\";\n      weekday[3] = \"Wednesday\";\n      weekday[4] = \"Thursday\";\n      weekday[5] = \"Friday\";\n      weekday[6] = \"Saturday\";\n\n      var month = new Array();\n      month[0] = \"January\";\n      month[1] = \"February\";\n      month[2] = \"March\";\n      month[3] = \"April\";\n      month[4] = \"May\";\n      month[5] = \"June\";\n      month[6] = \"July\";\n      month[7] = \"August\";\n      month[8] = \"September\";\n      month[9] = \"October\";\n      month[10] = \"November\";\n      month[11] = \"December\";\n      let todaydate = date.getDate();\n      let today = weekday[date.getDay()]+\" \"+todaydate+\" \"+month[date.getMonth()];\n      setDate(today);\n  };\n  \n  const fetchcurrentlocationData = async () => {\n    navigator.geolocation.getCurrentPosition(function(position) {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n    });\n\n    await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n    .then((res)=> res.json())\n    .then((result1)=>{\n      setData(result1);\n    });\n\n    await fetch(`${process.env.REACT_APP_API_URL}/forecast?lat=${lat}&lon=${long}&units=metric&appid=${process.env.REACT_APP_API_KEY}`)\n    .then((res)=> res.json())\n    .then((result2)=>{\n      setforecastData(result2);\n      console.log(result2);\n    });\n  };\n\n  useEffect(() => {\n    fetchcurrentlocationData();\n    DataTime();\n  },[lat,long,city]);\n\n\n\n  \n\n  return (\n      <>\n          <div className=\"body\">\n            <Navbar searchfunc={searchData} inputValue={city} buttonFunc={buttonClicked}/>\n            <Datetime currentDate={date} />\n            <div className=\"app\">\n\n                { (data.message === \"city not found\") ? <DataNotfound /> : (typeof data.main !== 'undefined' && typeof forecastData.list!=='undefined') ?  (\n                      <>\n                        <Weather weatherData={data} reloadButton={refresh}/>\n                        <Forecast foreCast={forecastData}/>\n                      </>\n                    ) : (\n\n                      <Loading />\n                    )}  \n            </div>\n          </div>\n             \n         <Footer /> \n      </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />,document.getElementById('root'));\n"],"sourceRoot":""}